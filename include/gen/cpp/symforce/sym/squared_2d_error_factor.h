// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * squared distance error for a two input, two output
 * linear regression problem
 * Y = Ax
 *     jacobian: (2x6) jacobian of res wrt args A (4), B (2)
 *     hessian: (6x6) Gauss-Newton hessian for args A (4), B (2)
 *     rhs: (6x1) Gauss-Newton rhs for args A (4), B (2)
 */
template <typename Scalar>
void Squared2DErrorFactor(const Eigen::Matrix<Scalar, 2, 1>& X,
                          const Eigen::Matrix<Scalar, 2, 1>& Y,
                          const Eigen::Matrix<Scalar, 2, 2>& A,
                          const Eigen::Matrix<Scalar, 2, 1>& B,
                          Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
                          Eigen::Matrix<Scalar, 2, 6>* const jacobian = nullptr,
                          Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                          Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 70

  // Input arrays

  // Intermediate terms (21)
  const Scalar _tmp0 = A(0, 0) * X(0, 0);
  const Scalar _tmp1 = A(0, 1) * X(1, 0);
  const Scalar _tmp2 = -B(0, 0) + Y(0, 0) - _tmp0 - _tmp1;
  const Scalar _tmp3 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = A(1, 0) * X(0, 0);
  const Scalar _tmp5 = A(1, 1) * X(1, 0);
  const Scalar _tmp6 = -B(1, 0) + Y(1, 0) - _tmp4 - _tmp5;
  const Scalar _tmp7 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp8 = 2 * X(0, 0);
  const Scalar _tmp9 = _tmp2 * _tmp8;
  const Scalar _tmp10 = _tmp6 * _tmp8;
  const Scalar _tmp11 = 2 * X(1, 0);
  const Scalar _tmp12 = _tmp11 * _tmp2;
  const Scalar _tmp13 = _tmp11 * _tmp6;
  const Scalar _tmp14 = 2 * B(0, 0) - 2 * Y(0, 0) + 2 * _tmp0 + 2 * _tmp1;
  const Scalar _tmp15 = 2 * B(1, 0) - 2 * Y(1, 0) + 2 * _tmp4 + 2 * _tmp5;
  const Scalar _tmp16 = 4 * std::pow(X(0, 0), Scalar(2));
  const Scalar _tmp17 = 4 * X(0, 0) * X(1, 0);
  const Scalar _tmp18 = 4 * std::pow(X(1, 0), Scalar(2));
  const Scalar _tmp19 = [&]() {
    const Scalar base = _tmp2;
    return base * base * base;
  }();
  const Scalar _tmp20 = [&]() {
    const Scalar base = _tmp6;
    return base * base * base;
  }();

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp3;
    _res(1, 0) = _tmp7;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = -_tmp9;
    _jacobian(1, 0) = 0;
    _jacobian(0, 1) = 0;
    _jacobian(1, 1) = -_tmp10;
    _jacobian(0, 2) = -_tmp12;
    _jacobian(1, 2) = 0;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = -_tmp13;
    _jacobian(0, 4) = _tmp14;
    _jacobian(1, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = _tmp15;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) = _tmp16 * _tmp3;
    _hessian(2, 0) = _tmp17 * _tmp3;
    _hessian(4, 0) = -_tmp14 * _tmp9;
    _hessian(1, 1) = _tmp16 * _tmp7;
    _hessian(3, 1) = _tmp17 * _tmp7;
    _hessian(5, 1) = -_tmp10 * _tmp15;
    _hessian(2, 2) = _tmp18 * _tmp3;
    _hessian(4, 2) = -_tmp12 * _tmp14;
    _hessian(3, 3) = _tmp18 * _tmp7;
    _hessian(5, 3) = -_tmp13 * _tmp15;
    _hessian(4, 4) = std::pow(_tmp14, Scalar(2));
    _hessian(5, 5) = std::pow(_tmp15, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = -_tmp19 * _tmp8;
    _rhs(1, 0) = -_tmp20 * _tmp8;
    _rhs(2, 0) = -_tmp11 * _tmp19;
    _rhs(3, 0) = -_tmp11 * _tmp20;
    _rhs(4, 0) = _tmp14 * _tmp3;
    _rhs(5, 0) = _tmp15 * _tmp7;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
