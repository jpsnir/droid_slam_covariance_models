// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * squared distance error for a two input, two output
 * linear regression problem
 * Y = Ax
 *     res_D_A: (2x4) jacobian of res (2) wrt arg A (4)
 *     res_D_B: (2x2) jacobian of res (2) wrt arg B (2)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> Squared2DErrorResidualWithJacobians23(
    const Eigen::Matrix<Scalar, 2, 1>& X, const Eigen::Matrix<Scalar, 2, 1>& Y,
    const Eigen::Matrix<Scalar, 2, 2>& A, const Eigen::Matrix<Scalar, 2, 1>& B,
    Eigen::Matrix<Scalar, 2, 4>* const res_D_A = nullptr,
    Eigen::Matrix<Scalar, 2, 2>* const res_D_B = nullptr) {
  // Total ops: 36

  // Input arrays

  // Intermediate terms (8)
  const Scalar _tmp0 = A(0, 0) * X(0, 0);
  const Scalar _tmp1 = A(0, 1) * X(1, 0);
  const Scalar _tmp2 = -B(0, 0) + Y(0, 0) - _tmp0 - _tmp1;
  const Scalar _tmp3 = A(1, 0) * X(0, 0);
  const Scalar _tmp4 = A(1, 1) * X(1, 0);
  const Scalar _tmp5 = -B(1, 0) + Y(1, 0) - _tmp3 - _tmp4;
  const Scalar _tmp6 = 2 * X(0, 0);
  const Scalar _tmp7 = 2 * X(1, 0);

  // Output terms (3)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = std::pow(_tmp2, Scalar(2));
  _res(1, 0) = std::pow(_tmp5, Scalar(2));

  if (res_D_A != nullptr) {
    Eigen::Matrix<Scalar, 2, 4>& _res_D_A = (*res_D_A);

    _res_D_A(0, 0) = -_tmp2 * _tmp6;
    _res_D_A(1, 0) = 0;
    _res_D_A(0, 1) = 0;
    _res_D_A(1, 1) = -_tmp5 * _tmp6;
    _res_D_A(0, 2) = -_tmp2 * _tmp7;
    _res_D_A(1, 2) = 0;
    _res_D_A(0, 3) = 0;
    _res_D_A(1, 3) = -_tmp5 * _tmp7;
  }

  if (res_D_B != nullptr) {
    Eigen::Matrix<Scalar, 2, 2>& _res_D_B = (*res_D_B);

    _res_D_B(0, 0) = 2 * B(0, 0) - 2 * Y(0, 0) + 2 * _tmp0 + 2 * _tmp1;
    _res_D_B(1, 0) = 0;
    _res_D_B(0, 1) = 0;
    _res_D_B(1, 1) = 2 * B(1, 0) - 2 * Y(1, 0) + 2 * _tmp3 + 2 * _tmp4;
  }

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
