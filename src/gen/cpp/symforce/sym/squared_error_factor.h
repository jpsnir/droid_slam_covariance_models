// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * squared distance error for a single variable
 * linear regression problem
 * y = ax
 *
 * e = (y - a1*x))^2
 *     jacobian: (1x1) jacobian of res wrt arg a (1)
 *     hessian: (1x1) Gauss-Newton hessian for arg a (1)
 *     rhs: (1x1) Gauss-Newton rhs for arg a (1)
 */
template <typename Scalar>
void SquaredErrorFactor(const Scalar x, const Scalar y, const Scalar a,
                        Eigen::Matrix<Scalar, 1, 1>* const res = nullptr,
                        Eigen::Matrix<Scalar, 1, 1>* const jacobian = nullptr,
                        Eigen::Matrix<Scalar, 1, 1>* const hessian = nullptr,
                        Eigen::Matrix<Scalar, 1, 1>* const rhs = nullptr) {
  // Total ops: 12

  // Input arrays

  // Intermediate terms (3)
  const Scalar _tmp0 = -a * x + y;
  const Scalar _tmp1 = std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = 2 * x;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _res = (*res);

    _res(0, 0) = _tmp1;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _jacobian = (*jacobian);

    _jacobian(0, 0) = -_tmp0 * _tmp2;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _hessian = (*hessian);

    _hessian(0, 0) = 4 * _tmp1 * std::pow(x, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _rhs = (*rhs);

    _rhs(0, 0) = -[&]() {
      const Scalar base = _tmp0;
      return base * base * base;
    }() * _tmp2;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
